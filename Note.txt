https://www.intel.com/content/www/us/en/docs/intrinsics-guide/index.html#avx512techs=AVX512F,AVX512BW,AVX512CD,AVX512DQ,AVX512IFMA52,AVX512VL,AVX512VPOPCNTDQ,AVX512_BITALG,AVX512_VBMI,AVX512_VBMI2,AVX512_VNNI

_mm256_sllv_epi64
_mm_permute

_lrotl
_lrotr

FPGA
  https://en.wikipedia.org/wiki/Barrel_shifter

Scive
  https://create.stephan-brumme.com/eratosthenes/
  https://stackoverflow.com/questions/17241028/finding-lists-of-prime-numbers-with-simd-sse-avx
  https://en.wikipedia.org/wiki/Wheel_factorization


http://www.cs.cornell.edu/~ashwin85/docs/frp0328-badanidiyuru.pdf
https://betterprogramming.pub/prime-numbers-as-streams-with-rxjs-and-go-a18b0292fb5e

https://www.officedaytime.com/simd512e/

https://www.nayuki.io/page/fast-fourier-transform-in-x86-assemblye

https://primes.utm.edu/howmany.html

i     1 2 3 4 5 6 7 8 9 10 0
    +
i-1   0 1 2 3 4 5 6 7 8 9 10

      3 5 7 9 0 2 4 6 8 10 1

      4 6 8 10 1 3 5 7 9 0 2


		mask7 << (5+(6-(i%7)))%7;
		mask11 << 2+((i%7)*2)%7;

         9,223,372,036,854,775,808
10,000,000,000,000,000,000,000,000

100,000,000,000

10,000,000,000
43.7946


vector<int> hi = std::vector{1, 23, 4, 5, 6, 7};


read only const auto& 
read wright auto&
copy auto

for (auto& a : hi) {
  cout << a << '\n';
}

  X=1   ((X+2X)*i)%3
  1   (1  + 2   *i)%3   1+0   1-1   (3-1*1)mod3 2
  2   (2  + 1   *i)%5   2+0   2-2   (5-2*2)mod5 1
  3   (3  + 6   *i)%7   3+0   3-3   (7âˆ’3*3)mod7 5
  4   (5  + 2   *i)%11  4+1   4-3   (11-4*5)mod11 2
  5   (6  + 1   *i)%13  5+1   5-4   (13-5*6)mod13 9
  6   (8  + 4   *i)%17  6+2   6-4   (17-6*8)mod17 3
  7   (9  + 12  *i)%19  7+2   7-5   (19-7*9)mod19 13
  8   (11 + 5   *i)%23  8+3   8-5   (23-8*11)mod23 4
  9   (14 + 23  *i)%29  9+5   9-4   
  10  (15 + 29  *i)%31  10+5  10-5  
  11  (18 + 10  *i)%37  11+7  11-4  
  12  (20 + 18  *i)%41  12+8  12-4  
  13  (21 + 22  *i)%43  13+8  13-5  
  14  (23 + 30  *i)%47  14+9  14-5  
  15  (26 + 42  *i)%53  15+11 15-4  
  16  (29 + 54  *i)%59  16+13 16-3  



  1   (1  + 2   *i)%3   1^3
  2   (2  + 1   *i)%5   2^5
  3   (3  + 6   *i)%7   3^7
  4   (5  + 2   *i)%11  4^11
  5   (6  + 1   *i)%13  5^13
  6   (8  + 4   *i)%17  6^17



  X=1   ((X+2X)*i)%3
  2   (1  + 2   *i)%3   2-1   1-1
  3   (2  + 1   *i)%5   3-1   2-2
  4   (3  + 6   *i)%7   4-1   3-3
  5   (5  + 2   *i)%11  5+1   4-3
  6   (6  + 1   *i)%13  6+1   5-4
  7   (8  + 4   *i)%17  7+2   6-4
  8   (9  + 12  *i)%19  8+2   7-5
  9   (11 + 5   *i)%23  9+3   8-5
  10  (14 + 23  *i)%29  10+5   9-4
  11  (15 + 29  *i)%31  11+5  10-5
  12  (18 + 10  *i)%37  12+7  11-4
  13  (20 + 18  *i)%41  13+8  12-4
  14  (21 + 22  *i)%43  14+8  13-5
  15  (23 + 30  *i)%47  15+9  14-5
  16  (26 + 42  *i)%53  16+11 15-4
  16  (29 + 54  *i)%59  16+13 16-3


(1+2*i)%3     (3-1)/2   3-1 2
(2+1*i)%5     (5-1)/2   5-4 1 6
(3+6*i)%7     (7-1)/2   7-1
(5+2*i)%11    (11-1)/2
(6+1*i)%13    (13-1)/2
(8+4*i)%17    (17-1)/2
(9+12*i)%19   (19-1)/2
(11+5*i)%23   (23-1)/2
(14+23*i)%29
(15+29*i)%31
(18+10*i)%37
(20+18*i)%41
(21+22*i)%43
(23+30*i)%47
(26+42*i)%53
(29+54*i)%59  29+25=54

X2 CLOSTEST PRIME


1   (1+2*i)%3     (3-1*1)mod3     2      2 5  8  11 14 17 20 23 26 29 32 35 38 41 
2   (2+1*i)%5     (5-2*2)mod5     1      1 6  11 16 21 26 31 36 41
3   (3+6*i)%7     (7-3*3)mod7     5  +1  6 13 20 27 34 41
4   (5+2*i)%11    (11-4*5)mod11   2      2 13 24 35 46
5   (6+1*i)%13    (13-5*6)mod13   9  -8  1 14 27 40 53
6   (8+4*i)%17    (17-6*8)mod17   3  +1  4 21 38 55 72 89
7   (9+12*i)%19   (19-7*9)mod19   13 -1  12
8   (11+5*i)%23   (23-8*11)mod23  4  +1  5
9   (14+23*i)%29  (29-9*14)mod29  19 +4  23
10  (15+29*i)%31  (31-10*15)mod31 5  +24 29
11  (18+10*i)%37  (37-11*18)mod37 24 -14 10
12  (20+18*i)%41  (41-12*20)mod41 6  +12 18
13  (21+22*i)%43  (43-13*21)mod43 28 -6  22
14  (23+30*i)%47  (47-14*23)mod47 5  +25 30
15  (26+42*i)%53  (53-15*26)mod53 34 +8  42
16  (29+54*i)%59  (59-16*29)mod59 8  +46 54


int modInverse(int a, int prime)
{
    a = a % prime;
    for (int x=1; x<prime; x++)
       if ((a*x) % prime == 1)
          return x;
      
    return -1;
}
 
void printModIverses(int n, int prime)
{
    for (int i=1; i<=n; i++)
      cout << modInverse(i, prime) << " ";
}
  
// Driver Program
int main()
{
    int n = 10, prime = 17;
    printModIverses(n, prime);
    return 0;
}

(1+2*i)%3     1 2 3   1+1%3 (1*1*2)mod3    2 
(2+1*i)%5     2 5 2   2+4%5 (2*2*2)mod5    1
(3+6*i)%7     3 7 3   3+3%7 (3*3*3)mod7    6
(5+2*i)%11    5 11 4        (5+8)mod11     3
(6+1*i)%13                  (6+8)mod13     5
(8+4*i)%17    
(9+12*i)%19   
(11+5*i)%23   
(14+23*i)%29  
(15+29*i)%31  
(18+10*i)%37  
(20+18*i)%41  
(21+22*i)%43  
(23+30*i)%47  
(26+42*i)%53  
(29+54*i)%59  

2     2     1     3       64mod 1   128mod3 2
1     3     2     5       64mod 4   128mod5 3
6     4     3     7       64mod 1   128mod7 21
2     5     5     11
1     6     6     13
4     7     8     17
12    8     9     19
5     9     11    23
23    10    14    29
29    1     15    31
10    1     18    37
18    1     20    41
22    1     21    43
30    1     23    47
42    1     26    53
54    1     29    59

1+1%3
2+4%5
3+3%7


 pattern 1 0 2 1
 pattern 2 3 4 0 1 2
 pattern 3 2 1 0 6 5 4 3
 pattern 5 7 9 0 2 4 6 8 10 1 3 5
 pattern 6 7 8 9 10 11 12 0 1 2 3 4 5 6
 pattern 8 12 16 3 7 11 15 2 6 10 14 1 5 9 13 0 4 8
 pattern 9 2 14 7 0 12 5 17 10 3 15 8 1 13 6 18 11 4 16 9
 pattern 11 16 21 3 8 13 18 0 5 10 15 20 2 7 12 17 22 4 9 14 19 1 6 11
 pattern 14 8 2 25 19 13 7 1 24 18 12 6 0 23 17 11 5 28 22 16 10 4 27 21 15 9 3 26 20 14
 pattern 15 13 11 9 7 5 3 1 30 28 26 24 22 20 18 16 14 12 10 8 6 4 2 0 29 27 25 23 21 19 17 15
 pattern 18 28 1 11 21 31 4 14 24 34 7 17 27 0 10 20 30 3 13 23 33 6 16 26 36 9 19 29 2 12 22 32 5 15 25 35 8 18
 pattern 20 38 15 33 10 28 5 23 0 18 36 13 31 8 26 3 21 39 16 34 11 29 6 24 1 19 37 14 32 9 27 4 22 40 17 35 12 30 7 25 2 20
 pattern 21 0 22 1 23 2 24 3 25 4 26 5 27 6 28 7 29 8 30 9 31 10 32 11 33 12 34 13 35 14 36 15 37 16 38 17 39 18 40 19 41 20 42 21
 pattern 23 6 36 19 2 32 15 45 28 11 41 24 7 37 20 3 33 16 46 29 12 42 25 8 38 21 4 34 17 0 30 13 43 26 9 39 22 5 35 18 1 31 14 44 27 10 40 23
 pattern 26 15 4 46 35 24 13 2 44 33 22 11 0 42 31 20 9 51 40 29 18 7 49 38 27 16 5 47 36 25 14 3 45 34 23 12 1 43 32 21 10 52 41 30 19 8 50 39 28 17 6 48 37 26
 pattern 29 24 19 14 9 4 58 53 48 43 38 33 28 23 18 13 8 3 57 52 47 42 37 32 27 22 17 12 7 2 56 51 46 41 36 31 26 21 16 11 6 1 55 50 45 40 35 30 25 20 15 10 5 0 54 49 44 39 34 29




1   2
2   1
3   6
5   2
6   1
8   4
9   12
11  5
14  23
15  29
18  10
20  18
21  22
23  30
26  42
29  54
